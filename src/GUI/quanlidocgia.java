/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BLL.MuonSachBLL;
import BLL.DSQuaHanBLL;
import BLL.DocGiaBLL;
import DTO.DocGiaDTO;
import BLL.QuanLiDocGiaBLL;
import DTO.DSMuonSachDTO;
import DTO.DSQuaHanDTO;
import DTO.TaiKhoanDTO;
import DTO.TheThuVienDTO;
//import static QLTV.Cquanlidocgia.CheckNgayThang;
//import static QLTV.Cquanlidocgia.ChonKieuDuyet;
import DAL.Database;
import static DAL.Database.StringToInt;
import static DAL.Database.conectionJDBC;
import static DAL.Database.getData;
//import database.Mquanlidocgia;
//import static database.Mquanlidocgia.LayDocGiaHanTheoNgay;
//import static database.Mquanlidocgia.LayDocGiaHanTheoThang;
//import static database.Mquanlidocgia.LayDocGiaMuonTheoNgay;
//import static database.Mquanlidocgia.LayDocGiaMuonTheoThang;
//import static database.Mquanlidocgia.XoaDG;
//import static database.Mquanlidocgia.setDefaultDocgia;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.TimeZone;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.runtime.regexp.joni.Syntax.Java;

/**
 *
 * @author ADMIN
 */
public class quanlidocgia extends javax.swing.JFrame implements ActionListener, ItemListener, ListSelectionListener {

    /**
     * Creates new form quanlidocgia
     */
    public quanlidocgia() {
        initComponents();
        // this.setDefaultDocgia();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        this.TextGioiTinh.setEditable(true);
        this.BSuaDocGia.setEnabled(false);
        this.CBBoxDoiTuong.addItemListener(this);
        this.BXemDocGia.addActionListener(this);
        this.BXemMuon.addActionListener(this);
        this.BXemHan.addActionListener(this);
        this.BXoaDocGia.addActionListener(this);
        this.TableDocGia.getSelectionModel().addListSelectionListener(this);
        this.BSuaDocGia.addActionListener(this);
        this.TextGioiTinh.setEditable(true);
        this.BThemDocGia.addActionListener(this);
        this.CBBoxLop.removeAllItems();
        this.CBBoxDoiTuong.removeAllItems();
        this.DateNgaySinh.setDateFormatString("dd-MM-yyyy");
        String[] doituong = {"Giao vien", "Hoc sinh"};
        String[] lop = {"10", "11", "12"};
        this.CBBoxLop.setModel(new DefaultComboBoxModel(lop));
        this.CBBoxDoiTuong.setModel(new DefaultComboBoxModel(doituong));
        this.CBBoxLop.setEnabled(false);
        this.setDefaultDocgia();
        //this.TableDocGia.setModel(setDefaultDocgia());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableDocGia = new javax.swing.JTable();
        TextTen = new javax.swing.JTextField();
        TextGioiTinh = new javax.swing.JTextField();
        TextDiaChi = new javax.swing.JTextField();
        DateNgaySinh = new com.toedter.calendar.JDateChooser();
        TextSDT = new javax.swing.JTextField();
        BThemDocGia = new javax.swing.JButton();
        BSuaDocGia = new javax.swing.JButton();
        BXoaDocGia = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        CBBoxDoiTuong = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        CBBoxLop = new javax.swing.JComboBox<>();
        BXemDocGia = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        RadioXemTuNgay = new javax.swing.JRadioButton();
        RadioXemThangNam = new javax.swing.JRadioButton();
        DateTuNgayMuon = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        DateDenNgayMuon = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        ChonNamMuon = new com.toedter.calendar.JYearChooser();
        BXemMuon = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ChonThangMuon = new com.toedter.calendar.JMonthChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableHan = new javax.swing.JTable();
        RadioTuNgayHan = new javax.swing.JRadioButton();
        RadioThangNamHan = new javax.swing.JRadioButton();
        ChonTuNgayHan = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        ChonDenNgayHan = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        ChonNamHan = new com.toedter.calendar.JYearChooser();
        BXemHan = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        ChonThangHan = new com.toedter.calendar.JMonthChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÍ ĐỘC GIẢ | Trường THPT DƯỠNG ĐIỀM");

        jLabel7.setBackground(new java.awt.Color(204, 0, 0));
        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel7.setText("Thông tin độc giả");
        jLabel7.setOpaque(true);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Họ và tên");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Giới tính");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Địa chỉ");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setText("Ngày sinh");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("Số điện thoại");

        TableDocGia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã độc giả", "Tên độc giả", "Mã thẻ", "Giới tính", "Địa chỉ", "Ngày sinh", "Số điện thoại", "Đối tượng", "Lớp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(TableDocGia);

        TextTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextTenActionPerformed(evt);
            }
        });

        TextDiaChi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextDiaChiActionPerformed(evt);
            }
        });

        BThemDocGia.setText("Thêm");
        BThemDocGia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        BSuaDocGia.setText("Sửa");
        BSuaDocGia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        BXoaDocGia.setText("Xóa");
        BXoaDocGia.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        jButton8.setText("Hủy");
        jButton8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        jButton9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        CBBoxDoiTuong.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setText("Đối tượng");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setText("Lớp");

        CBBoxLop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        BXemDocGia.setText("Xem");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TextTen)
                                    .addComponent(TextGioiTinh)
                                    .addComponent(TextDiaChi, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                                .addGap(80, 80, 80)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(TextSDT, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addGap(18, 18, 18)
                                                .addComponent(CBBoxDoiTuong, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel15))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel12)
                                                .addGap(41, 41, 41)
                                                .addComponent(DateNgaySinh, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addComponent(CBBoxLop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(BXemDocGia)
                        .addGap(18, 18, 18)
                        .addComponent(BThemDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BSuaDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(244, 244, 244)
                        .addComponent(BXoaDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(136, 136, 136))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 994, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DateNgaySinh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(TextTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextGioiTinh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextSDT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TextDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CBBoxDoiTuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(CBBoxLop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BXoaDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BXemDocGia)
                        .addComponent(BThemDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(BSuaDocGia, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(22, 22, 22))
        );

        jTabbedPane1.addTab("Thông tin độc giả", jPanel3);

        jLabel1.setBackground(new java.awt.Color(204, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel1.setText("Độc giả mượn sách");
        jLabel1.setOpaque(true);

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã thẻ", "Mã độc giả", "Tên độc giả", "Số lượng sách đã mượn"
            }
        ));
        jScrollPane1.setViewportView(Table);

        RadioXemTuNgay.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RadioXemTuNgay.setText("Từ ngày ");

        RadioXemThangNam.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RadioXemThangNam.setText("Theo tháng");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Đến ngày");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Năm ");

        BXemMuon.setText("Xem");
        BXemMuon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 3));

        jButton2.setText("In");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(227, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RadioXemTuNgay)
                        .addGap(18, 18, 18)
                        .addComponent(DateTuNgayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RadioXemThangNam)
                        .addGap(1, 1, 1)
                        .addComponent(ChonThangMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DateDenNgayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(BXemMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ChonNamMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(229, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1026, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(11, 11, 11)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(DateTuNgayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(RadioXemTuNgay))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(RadioXemThangNam))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(ChonThangMuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(39, 39, 39)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DateDenNgayMuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(6, 6, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ChonNamMuon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(BXemMuon, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Danh sách độc giả mượn sách", jPanel1);

        jLabel4.setBackground(new java.awt.Color(204, 0, 0));
        jLabel4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel4.setText("Độc giả mượn quá hạn");
        jLabel4.setOpaque(true);

        TableHan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "Mã thẻ", "Mã độc giả", "Tên độc giả", "Số sách quá hạn"
            }
        ));
        jScrollPane2.setViewportView(TableHan);

        RadioTuNgayHan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RadioTuNgayHan.setText("Từ ngày");

        RadioThangNamHan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        RadioThangNamHan.setText("Theo tháng");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Đến ngày");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Năm ");

        BXemHan.setText("Xem ");
        BXemHan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 3));

        jButton4.setText("In");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153), 3));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(RadioThangNamHan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RadioTuNgayHan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(ChonTuNgayHan, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(55, 55, 55)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ChonNamHan, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ChonDenNgayHan, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(BXemHan, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(ChonThangHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 452, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RadioTuNgayHan)
                            .addComponent(ChonTuNgayHan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChonDenNgayHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ChonThangHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(RadioThangNamHan)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ChonNamHan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BXemHan, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Danh sách độc giả mượn quá hạn", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextDiaChiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextDiaChiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextDiaChiActionPerformed

    private void TextTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextTenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextTenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(quanlidocgia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(quanlidocgia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(quanlidocgia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(quanlidocgia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new quanlidocgia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BSuaDocGia;
    private javax.swing.JButton BThemDocGia;
    private javax.swing.JButton BXemDocGia;
    private javax.swing.JButton BXemHan;
    private javax.swing.JButton BXemMuon;
    private javax.swing.JButton BXoaDocGia;
    private javax.swing.JComboBox<String> CBBoxDoiTuong;
    private javax.swing.JComboBox<String> CBBoxLop;
    private com.toedter.calendar.JDateChooser ChonDenNgayHan;
    private com.toedter.calendar.JYearChooser ChonNamHan;
    private com.toedter.calendar.JYearChooser ChonNamMuon;
    private com.toedter.calendar.JMonthChooser ChonThangHan;
    private com.toedter.calendar.JMonthChooser ChonThangMuon;
    private com.toedter.calendar.JDateChooser ChonTuNgayHan;
    private com.toedter.calendar.JDateChooser DateDenNgayMuon;
    private com.toedter.calendar.JDateChooser DateNgaySinh;
    private com.toedter.calendar.JDateChooser DateTuNgayMuon;
    private javax.swing.JRadioButton RadioThangNamHan;
    private javax.swing.JRadioButton RadioTuNgayHan;
    private javax.swing.JRadioButton RadioXemThangNam;
    private javax.swing.JRadioButton RadioXemTuNgay;
    private javax.swing.JTable Table;
    private javax.swing.JTable TableDocGia;
    private javax.swing.JTable TableHan;
    private javax.swing.JTextField TextDiaChi;
    private javax.swing.JTextField TextGioiTinh;
    private javax.swing.JTextField TextSDT;
    private javax.swing.JTextField TextTen;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

//    @Override
//    public void actionPerformed(ActionEvent e) {
//        if (e.getSource().equals(BXemMuon)) {
//            int temp=ChonKieuDuyet(this.RadioXemTuNgay.isSelected(), this.RadioXemThangNam.isSelected());
//            if ( temp== 1) {
//                if(CheckNgayThang(this.DateTuNgayMuon.getDate(),this.DateDenNgayMuon.getDate()))
//                this.Table.setModel(LayDocGiaMuonTheoNgay(this.DateTuNgayMuon.getDate(), this.DateDenNgayMuon.getDate()));
//            } else {
//                if (temp == 2) {
//                    this.Table.setModel(LayDocGiaMuonTheoThang(this.ChonThangMuon.getMonth(), this.ChonNamMuon.getYear()));
//                }
//            }
////            try {
////                if (this.RadioXemTuNgay.isSelected() && this.RadioXemThangNam.isSelected() == false) {
////                    String tungay, denngay;
////                    java.sql.Date dtungay, ddenngay;
////                    dtungay = new java.sql.Date(this.DateTuNgayMuon.getDate().getTime());
////                    ddenngay = new java.sql.Date(this.DateDenNgayMuon.getDate().getTime());
////                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-YYYY");
////                    tungay = dateFormat.format(dtungay);
////                    denngay = dateFormat.format(ddenngay);
////                    System.out.println(tungay + "   " + denngay);
////                    String sql1 = "SELECT DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN FROM DOCGIA JOIN THETHUVIEN ON THETHUVIEN.MADOCGIA=DOCGIA.MADOCGIA JOIN QTMUON ON QTMUON.MADOCGIA=DOCGIA.MADOCGIA where ngaymuon <= TO_DATE('" + denngay + "','dd-MM-YYYY') and ngaymuon >= TO_DATE('" + tungay + "','dd-MM-YYYY') GROUP BY DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN";
////                    DefaultTableModel model = new DefaultTableModel();
////                    String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "tên độc giả", "Số sách đã mượn"};
////                    Object[] temp = new Object[5];
////                    int i = 1;
////                    model.setColumnIdentifiers(ar);
////                    ResultSet rs = getData(conectionJDBC(), sql1);
////                    try {
////                        while (rs.next()) {
////                            temp[0] = i;
////                            i++;
////                            temp[1] = rs.getString("MATHE");
////                            temp[2] = rs.getString("MADOCGIA");
////                            temp[3] = rs.getString("TEN");
////                            String sql2 = "select count(*) from qtmuon where ngaymuon <= TO_DATE('" + denngay + "','dd-MM-YYYY') and ngaymuon >= TO_DATE('" + tungay + "','dd-MM-YYYY') group by madocgia having madocgia='" + temp[2] + "'";
////                            ResultSet rss = getData(conectionJDBC(), sql2);
////                            while (rss.next()) {
////                                temp[4] = rss.getInt(1);
////                            }
////                            model.addRow(temp);
////                        }
////                    } catch (SQLException ex) {
////                        Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////                    }
////                    this.Table.setModel(model);
////                }
////            } catch (NullPointerException ex) {
////                JOptionPane.showMessageDialog(null, "khong duoc de ngay than trong");
////            }
////            if (this.RadioXemThangNam.isSelected() && this.RadioXemTuNgay.isSelected() == false) {
////
////                int thang = this.ChonThangMuon.getMonth();
////                int nam = this.ChonNamMuon.getYear();
////                String sql1 = "SELECT DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN FROM DOCGIA JOIN THETHUVIEN ON THETHUVIEN.MADOCGIA=DOCGIA.MADOCGIA JOIN QTMUON ON QTMUON.MADOCGIA=DOCGIA.MADOCGIA where EXTRACT(MONTH FROM ngaymuon) =" + thang + " and EXTRACT(YEAR FROM ngaymuon) = " + nam + " GROUP BY DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN";
////                DefaultTableModel model = new DefaultTableModel();
////                String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "tên độc giả", "Số sách đã mượn"};
////                Object[] temp = new Object[5];
////                int i = 1;
////                model.setColumnIdentifiers(ar);
////                ResultSet rs = getData(conectionJDBC(), sql1);
////                try {
////                    while (rs.next()) {
////                        temp[0] = i;
////                        i++;
////                        temp[1] = rs.getString("MATHE");
////                        temp[2] = rs.getString("MADOCGIA");
////                        temp[3] = rs.getString("TEN");
////                        String sql2 = "select count(*) from qtmuon where EXTRACT(MONTH FROM ngaymuon) =" + thang + " and EXTRACT(YEAR FROM ngaymuon) = " + nam + " group by madocgia having madocgia='" + temp[2] + "'";
////                        ResultSet rss = getData(conectionJDBC(), sql2);
////                        while (rss.next()) {
////                            temp[4] = rss.getInt(1);
////                        }
////                        model.addRow(temp);
////                    }
////                } catch (SQLException ex) {
////                    Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////                }
////                this.Table.setModel(model);
////            }
////            if (this.RadioXemTuNgay.isSelected() && this.RadioXemThangNam.isSelected()) {
////                JOptionPane.showMessageDialog(null, "vui long chi chon 1 kieu duyet");
////            }
////            if (!this.RadioXemTuNgay.isSelected() && !this.RadioXemThangNam.isSelected()) {
////                JOptionPane.showMessageDialog(null, "vui long chon 1 kieu duyet");
////            }
//        }
//
//        if (e.getSource().equals(BXemHan)) {
//            int temp=ChonKieuDuyet(this.RadioTuNgayHan.isSelected(), this.RadioThangNamHan.isSelected());
//            if ( temp== 1) {
//                if(CheckNgayThang(this.ChonTuNgayHan.getDate(),this.ChonDenNgayHan.getDate()))
//                this.TableHan.setModel(LayDocGiaHanTheoNgay(this.ChonTuNgayHan.getDate(), this.ChonDenNgayHan.getDate()));
//            } else {
//                if (temp == 2) {
//                    this.TableHan.setModel(LayDocGiaHanTheoThang(this.ChonThangHan.getMonth(), this.ChonNamHan.getYear()));
//                }
//            }
////            try {
////                if (this.RadioTuNgayHan.isSelected() && this.RadioThangNamHan.isSelected() == false) {
////                    String tungay, denngay;
////                    java.sql.Date dtungay, ddenngay;
////                    dtungay = new java.sql.Date(this.ChonTuNgayHan.getDate().getTime());
////                    ddenngay = new java.sql.Date(this.ChonDenNgayHan.getDate().getTime());
////                    DateFormat dateFormat = new SimpleDateFormat("dd-MM-YYYY");
////                    tungay = dateFormat.format(dtungay);
////                    denngay = dateFormat.format(ddenngay);
////                    System.out.println(tungay + "   " + denngay);
////                    String sql1 = "SELECT DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN FROM DOCGIA JOIN THETHUVIEN ON THETHUVIEN.MADOCGIA=DOCGIA.MADOCGIA JOIN QTMUON ON QTMUON.MADOCGIA=DOCGIA.MADOCGIA where ngaymuon <= TO_DATE('" + denngay + "','dd-MM-YYYY') and ngaymuon >= TO_DATE('" + tungay + "','dd-MM-YYYY') and NGAYTRA is null GROUP BY DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN";
////                    DefaultTableModel model = new DefaultTableModel();
////                    String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "tên độc giả", "Số sách quá hạn"};
////                    Object[] temp = new Object[5];
////                    int i = 1;
////                    model.setColumnIdentifiers(ar);
////                    ResultSet rs = getData(conectionJDBC(), sql1);
////                    try {
////                        while (rs.next()) {
////                            temp[0] = i;
////                            i++;
////                            temp[1] = rs.getString("MATHE");
////                            temp[2] = rs.getString("MADOCGIA");
////                            temp[3] = rs.getString("TEN");
////                            String sql2 = "select count(*) from qtmuon where ngaymuon <= TO_DATE('" + denngay + "','dd-MM-YYYY') and ngaymuon >= TO_DATE('" + tungay + "','dd-MM-YYYY') and NGAYTRA is null group by madocgia having madocgia='" + temp[2] + "'";
////                            ResultSet rss = getData(conectionJDBC(), sql2);
////                            while (rss.next()) {
////                                temp[4] = rss.getInt(1);
////                            }
////                            model.addRow(temp);
////                        }
////                    } catch (SQLException ex) {
////                        Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////                    }
////                    this.TableHan.setModel(model);
////                }
////            } catch (NullPointerException ex) {
////                JOptionPane.showMessageDialog(null, "khong duoc de ngay thang trong");
////            }
////            if (this.RadioThangNamHan.isSelected() && this.RadioTuNgayHan.isSelected() == false) {
////                int thang = this.ChonThangHan.getMonth();
////                int nam = this.ChonNamHan.getYear();
////                thang++;// vì khi lấy giá trị từ ô tháng giá trị luôn <1 so với cái mình chọn vd:april=3
////                System.out.println(thang + "-" + nam);
////                String sql1 = "SELECT DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN FROM DOCGIA JOIN THETHUVIEN ON THETHUVIEN.MADOCGIA=DOCGIA.MADOCGIA JOIN QTMUON ON QTMUON.MADOCGIA=DOCGIA.MADOCGIA where EXTRACT(MONTH FROM ngaymuon) =" + thang + " and EXTRACT(YEAR FROM ngaymuon) = " + nam + " and NGAYTRA IS NULL GROUP BY DOCGIA.MADOCGIA,THETHUVIEN.MATHE,DOCGIA.TEN";
////                DefaultTableModel model = new DefaultTableModel();
////                String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "Tên độc giả", "Số lượng sách quá hạn"};
////                Object[] temp = new Object[5];
////                int i = 1;
////                model.setColumnIdentifiers(ar);
////                ResultSet rs = getData(conectionJDBC(), sql1);
////                try {
////                    while (rs.next()) {
////                        temp[0] = i;
////                        i++;
////                        temp[1] = rs.getString("MATHE");
////                        temp[2] = rs.getString("MADOCGIA");
////                        temp[3] = rs.getString("TEN");
////                        String sql2 = "select count(*) from qtmuon where EXTRACT(MONTH FROM ngaymuon) =" + thang + " and EXTRACT(YEAR FROM ngaymuon) = " + nam + " and NGAYTRA IS NULL group by madocgia having madocgia='" + temp[2] + "'";
////                        ResultSet rss = getData(conectionJDBC(), sql2);
////                        while (rss.next()) {
////                            temp[4] = rss.getInt(1);
////                        }
////                        model.addRow(temp);
////                    }
////                } catch (SQLException ex) {
////                    Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////                }
////                this.TableHan.setModel(model);
////            }
////            if (this.RadioTuNgayHan.isSelected() && this.RadioThangNamHan.isSelected()) {
////                JOptionPane.showMessageDialog(null, "vui lòng chỉ chọn 1 kiểu duyệt");
////            }
////            if (!this.RadioThangNamHan.isSelected() && !this.RadioTuNgayHan.isSelected()) {
////                JOptionPane.showMessageDialog(null, "vui lòng chọn 1 kiểu duyệt");
////            }
//        }
//        if (e.getSource().equals(BXoaDocGia)) {
//            int index = this.TableDocGia.getSelectedRow();
//            DefaultTableModel modelxoa = (DefaultTableModel) this.TableDocGia.getModel();
//            String ma = (String) modelxoa.getValueAt(index, 0);
//            modelxoa.removeRow(index);
//            this.TableDocGia.setModel(modelxoa);
//            XoaDG(ma);
////            String sqlcall = "{call XOA_DOCGIA(?)}";
////            try {
////                CallableStatement cast = (conectionJDBC()).prepareCall(sqlcall);
////                cast.setString(1, ma);
////                cast.execute();
////            } catch (SQLException ex) {
////                Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////            }
//            this.BSuaDocGia.setEnabled(false);
//            this.BXoaDocGia.setEnabled(false);
//
//        }
//        if (e.getSource().equals(BXemDocGia)) {
//            int index = this.TableDocGia.getSelectedRow();
//            this.BSuaDocGia.setEnabled(true);
//            this.TextGioiTinh.setEditable(false);
//            String[] temp = new String[9];
//            for (int i = 0; i < 9; i++) {
//                temp[i] = (String) this.TableDocGia.getModel().getValueAt(index, i);
//            }
//            this.TextTen.setText(temp[1]);
//            this.TextGioiTinh.setText(temp[3]);
//            this.TextDiaChi.setText(temp[4]);
//            this.TextSDT.setText(temp[6]);
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//            // set formatter to use UTC (instead of JVM default timezone)
//            sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
//            try {
//                // parse it as midnight (no shift to 01:00)
//                java.util.Date date = sdf.parse(temp[5]);
//                java.util.Date dateutil = new java.util.Date(date.getTime());
//                this.DateNgaySinh.setDate(dateutil);
//            } catch (ParseException ex) {
//                Logger.getLogger(quanlinhanvien.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            this.CBBoxDoiTuong.setSelectedItem(temp[7]);
//            this.CBBoxLop.setSelectedItem(temp[8]);
//            this.BXoaDocGia.setEnabled(true);
//        }
//        if (e.getSource().equals(BSuaDocGia)) {
//            int index = this.TableDocGia.getSelectedRow();
//            Mquanlidocgia.SuaDG((String)this.TableDocGia.getValueAt(index, 0), this.TextTen.getText(), this.TextGioiTinh.getText(), this.TextDiaChi.getText(), this.TextSDT.getText(), this.DateNgaySinh.getDate(), (String)this.CBBoxDoiTuong.getSelectedItem(),(String) this.CBBoxLop.getSelectedItem());
//           // Mquanlidocgia.SuaDG((String)this.TableDocGia.getValueAt(index, 0), this.TextTen.getText(), this.TextGioiTinh.getText(), this.TextDiaChi.getText(), this.TextSDT.getText(), this.DateNgaySinh.getDate(), (String)this.CBBoxDoiTuong.getSelectedItem(),(String) this.CBBoxLop.getSelectedItem());
////            String sqlupdate = "UPDATE DOCGIA SET TEN=?, GIOITINH=?, DIACHI=?, SDT=?, NGAYSINH=TO_DATE(?,'dd-MM-yyyy'), DOITUONG=?, LOP=? WHERE MADOCGIA='" + this.TableDocGia.getModel().getValueAt(index, 0) + "'";
////            try {
////                PreparedStatement update = conectionJDBC().prepareStatement(sqlupdate);
////                update.setString(1, this.TextTen.getText());
////                update.setString(2, this.TextGioiTinh.getText());
////                update.setString(3, this.TextDiaChi.getText());
////                update.setString(4, this.TextSDT.getText());
////                String strDate = new SimpleDateFormat("dd-MM-yyyy").format(new java.sql.Date((this.DateNgaySinh.getDate()).getTime()));
////                update.setString(5, strDate);
////                update.setString(6, (String) this.CBBoxDoiTuong.getSelectedItem());
////                update.setString(7, (String) this.CBBoxLop.getSelectedItem());
////                if ((this.CBBoxDoiTuong.getSelectedItem()).equals("Giao vien")) {
////                    update.setString(7, null);
////                }
////                update.execute();
////                JOptionPane.showMessageDialog(null, "cập nhật độc giả thành công");
////                this.setDefaultDocgia();
////            } catch (SQLException ex) {
////                JOptionPane.showMessageDialog(null, "dữ liệu để cập nhật độc giả có lỗi");
////                Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////            }
//            this.TableDocGia.setModel(setDefaultDocgia());
//            this.BSuaDocGia.setEnabled(false);
//            this.BXoaDocGia.setEnabled(false);
//        }
//        if (e.getSource().equals(BThemDocGia)) {
//            this.TableDocGia.getSelectionModel().clearSelection();
//            Mquanlidocgia.ThemDG(this.TextTen.getText(), this.DateNgaySinh.getDate(), this.TextSDT.getText(), this.TextDiaChi.getText(), (String) this.CBBoxLop.getSelectedItem(),(String) this.CBBoxDoiTuong.getSelectedItem(), this.TextGioiTinh.getText());
////            String sql = "{call ADD_DOCGIA(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
////            String user = TaoTenTKDocGia();
////            String mathe = TaoMaTheThuVien();
////            String strDate = new SimpleDateFormat("dd-MM-yyyy").format(new java.sql.Date((this.DateNgaySinh.getDate()).getTime()));
////            CallableStatement cst;
////            System.out.println(strDate);
////            try {
////                cst = conectionJDBC().prepareCall(sql);
////                cst.setString(1, user);
////                cst.setString(2, user);
////                cst.setString(3, "doc gia");
////                cst.setString(4, user);
////                cst.setString(5, this.TextTen.getText());
////                cst.setString(6, strDate);
////                cst.setString(7, this.TextSDT.getText());
////                cst.setString(8, this.TextDiaChi.getText());
////                if ((this.CBBoxDoiTuong.getSelectedItem()).equals("Giao vien")) {
////                    cst.setString(9, null);
////                } else {
////                    cst.setInt(9, Integer.parseInt((String) this.CBBoxLop.getSelectedItem()));
////                }
////                cst.setString(10, (String) this.CBBoxDoiTuong.getSelectedItem());
////                cst.setString(11, this.TextGioiTinh.getText());
////                cst.setString(12, mathe);
////                cst.setString(13, mathe);
////                cst.setString(14, user);
////                cst.setString(15, null);
////                cst.execute();
////                JOptionPane.showMessageDialog(null, "Thêm độc giả thành công");
////                this.setDefaultDocgia();
////            } catch (SQLException ex) {
////                Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////            }
//this.TableDocGia.setModel(setDefaultDocgia());
//        }
//    }
    public void setDefaultDocgia() {
        DefaultTableModel model = (DefaultTableModel) new DefaultTableModel();
        ArrayList<DocGiaDTO> ar = new ArrayList<DocGiaDTO>();
        QuanLiDocGiaBLL ql = new QuanLiDocGiaBLL();
        ar = ql.getAllDocGia();
        String[] title = {"Mã đôc giả", "Tên đôc giả", "Mã thẻ", "Giới tính", "Địa chỉ", "Ngày sinh", "Số điện thoại", "Đối tượng", "lớp"};
        model.setColumnIdentifiers(title);
        for (int i = 0; i < ar.size(); i++) {
            DocGiaDTO temp = ar.get(i);
            String ma = temp.getMaDG();
            String ten = temp.getTenDG();
            String mathe = temp.getMaThe();
            String gioitinh = temp.getGioiTinh();
            String diachi = temp.getDiaChi();
            String ngaysinh = temp.getNgaySinhDG();
            String sdt = temp.getSDT();
            String doituong = temp.getDoiTuong();
            String lop = temp.getLop();
            String[] row = {ma, ten, mathe, gioitinh, diachi, ngaysinh, sdt, doituong, lop};
            model.addRow(row);
        }
        this.TableDocGia.setModel(model);
    }

//    @Override
//    public void itemStateChanged(ItemEvent ie) {
//        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        if (ie.getStateChange() == ItemEvent.SELECTED) {
//            JComboBox localCombo = (JComboBox) ie.getSource();
//            if (localCombo.getSelectedItem().toString().equals("Hoc sinh")) {
//                this.CBBoxLop.setEnabled(true);
//            } else {
//                this.CBBoxLop.setEnabled(false);
//            }
//        }
//    }
//
//    @Override
//    public void valueChanged(ListSelectionEvent lse) {
////        int index = this.TableDocGia.getSelectedRow();
////        String[] temp=new String[9];
////        for(int i=0;i<9;i++){
////            temp[i]=(String)this.TableDocGia.getModel().getValueAt(index, i);
////        }
////        this.TextTen.setText(temp[1]);
////        this.TextGioiTinh.setText(temp[3]);
////        this.TextDiaChi.setText(temp[4]);
////        this.TextSDT.setText(temp[6]);
////        System.out.println(temp[5]);
////        String datee=temp[5].substring(0,10);
////        try {
////            System.out.println(new SimpleDateFormat("dd-MM-yyyy").parse(datee));
////            java.util.Date date=new java.util.Date(new SimpleDateFormat("dd-MM-yyyy").parse(datee).getTime());
////           // SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
////           System.out.println(date);
////            this.DateNgaySinh.setDate(date);
////            //System.out.println(this.DateNgaySinh.getDate());
////        } catch (ParseException ex) {
////            Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////        }
////        this.CBBoxDoiTuong.setSelectedItem(temp[7]);
////        this.CBBoxLop.setSelectedItem(temp[8]);
//    }
//
////    public static String TaoTenTKDocGia() {
////        int dem = 1;
////        Vector<String> v = new Vector<String>();
////        String sql = "select MADOCGIA FROM DOCGIA", temp = "";
////        ResultSet rs = getData(conectionJDBC(), sql);
////        try {
////            while (rs.next()) {
////                v.add(rs.getString("MADOCGIA"));
////            }
////            Collections.sort(v);
////            for (int i = 0; i < v.size(); i++) {
////                System.out.print(v.get(i) + " ");
////            }
////            if (dem >= v.size()) {
////                temp += String.valueOf(StringToInt(v.get(v.size() - 1)) + 1);
////            } else {
////                for (int i = 0; i < v.size() - 1; i++) {
////                    if (StringToInt(v.get(i + 1)) - StringToInt(v.get(i)) > 1) {
////                        //System.out.println(StringToInt(v.get(i)) + 1);
////                        temp += String.valueOf(StringToInt(v.get(i)) + 1);
////                        break;
////                    } else {
////                        dem++;
////                    }
////                }
////                System.out.println("dem:" + dem);
////            }
////            if (dem >= v.size()) {
//////                temp += String.valueOf(StringToInt(v.get(v.size() - 1)) + 1);
////                temp += String.valueOf(dem + 1);
////            }
////            //System.out.println(StringToInt(v.get(v.size()-1)) + 1);
////            System.out.println("temp:" + temp);
////            if (Integer.parseInt(temp) < 10) {
////                temp = "DG00" + temp;
////            } else if (Integer.parseInt(temp) >= 10 && Integer.parseInt(temp) < 100) {
////                temp = "DG0" + temp;
////            } else if (Integer.parseInt(temp) >= 100) {
////                temp = "DG" + temp;
////            }
////        } catch (SQLException ex) {
////            Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////        }
////        return temp;
////    }
//
//
////    public static String TaoMaTheThuVien() {
////        int dem = 1;
////        Vector<String> v = new Vector<String>();
////        String sql = "select MATHE FROM THETHUVIEN", temp = "";
////        ResultSet rs = getData(conectionJDBC(), sql);
////        try {
////            while (rs.next()) {
////                v.add(rs.getString("MATHE"));
////            }
////            Collections.sort(v);
////            for (int i = 0; i < v.size(); i++) {
////                System.out.print(v.get(i) + " ");
////            }
////            if (dem >= v.size()) {
////                temp += String.valueOf(StringToInt(v.get(v.size() - 1)) + 1);
////            } else {
////                for (int i = 0; i < v.size() - 1; i++) {
////                    if (StringToInt(v.get(i + 1)) - StringToInt(v.get(i)) > 1) {
////                        temp += String.valueOf(StringToInt(v.get(i)) + 1);
////                        break;
////                    } else {
////                        dem++;
////                    }
////
////                }
////            }
////            System.out.println("dem:" + dem);
////            if (dem >= v.size()) {
////                // temp += String.valueOf(StringToInt(v.get(v.size() - 1)) + 1);
////                temp += String.valueOf(dem + 1);
////            }
////            System.out.println("temp:" + temp);
////            if (Integer.parseInt(temp) < 10) {
////                temp = "0000" + temp;
////            } else if (Integer.parseInt(temp) >= 10 && Integer.parseInt(temp) < 100) {
////                temp = "000" + temp;
////            } else if (Integer.parseInt(temp) >= 100) {
////                temp = "00" + temp;
////            }
////        } catch (SQLException ex) {
////            Logger.getLogger(quanlidocgia.class.getName()).log(Level.SEVERE, null, ex);
////        }
////        return temp;
////    }
    @Override
    public void actionPerformed(ActionEvent ae) {

        if (ae.getSource().equals(BXemMuon)) {

            switch (ChonKieuDuyet(this.RadioXemTuNgay.isSelected(), this.RadioXemThangNam.isSelected())) {
                case 1: {
                    if (this.DateTuNgayMuon.getDate() == null || this.DateDenNgayMuon.getDate() == null) {
                        JOptionPane.showMessageDialog(null, "Nhập thiếu ngày");
                        return;
                    }
                    DefaultTableModel model = new DefaultTableModel();
                    String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "tên độc giả", "Số sách đã mượn"};
                    model.setColumnIdentifiers(ar);
                    MuonSachBLL dsmuonbll = new MuonSachBLL();
                    ArrayList<DSMuonSachDTO> ds = dsmuonbll.getTheoNgay(this.DateTuNgayMuon.getDate(), this.DateDenNgayMuon.getDate());
                    for (int i = 0; i < ds.size(); i++) {
                        DSMuonSachDTO temp = new DSMuonSachDTO();
                        temp = ds.get(i);
                        int stt = temp.getStt();
                        String mathe = temp.getMathe();
                        String madg = temp.getMadocgia();
                        String ten = temp.getTenDG();
                        int sosach = temp.getSoSachMuon();
                        Object[] arr = {stt, mathe, madg, ten, sosach};
                        model.addRow(arr);
                    }
                    this.Table.setModel(model);
                }
                case 2: {
                    DefaultTableModel model = new DefaultTableModel();
                    String[] ar = {"stt", "Mã thẻ", "Mã độc giả", "tên độc giả", "Số sách đã mượn"};
                    model.setColumnIdentifiers(ar);
                    MuonSachBLL dsmuonbll = new MuonSachBLL();
                    ArrayList<DSMuonSachDTO> ds = dsmuonbll.getTheoThang(this.ChonThangMuon.getMonth(), this.ChonNamMuon.getYear());
                    for (int i = 0; i < ds.size(); i++) {
                        DSMuonSachDTO temp = new DSMuonSachDTO();
                        temp = ds.get(i);
                        int stt = temp.getStt();
                        String mathe = temp.getMathe();
                        String madg = temp.getMadocgia();
                        String ten = temp.getTenDG();
                        int sosach = temp.getSoSachMuon();
                        Object[] arr = {stt, mathe, madg, ten, sosach};
                        model.addRow(arr);
                    }
                    this.Table.setModel(model);
                }
            }
        }
        if (ae.getSource().equals(BXemHan)) {
            switch (ChonKieuDuyet(this.RadioTuNgayHan.isSelected(), this.RadioThangNamHan.isSelected())) {
                case 1: {
                    if (this.ChonTuNgayHan.getDate() == null || this.ChonDenNgayHan.getDate() == null) {
                        JOptionPane.showMessageDialog(null, "Nhập thiếu ngày");
                        return;
                    }
                    DefaultTableModel model = new DefaultTableModel();
                    String[] ar = {"STT", "Mã thẻ", "Mã độc giả", "Tên độc giả", "Số sách quá hạn"};
                    model.setColumnIdentifiers(ar);
                    DSQuaHanBLL dsquahanbll = new DSQuaHanBLL();
                    ArrayList<DSQuaHanDTO> ds = dsquahanbll.getTheoNgayHan(this.ChonTuNgayHan.getDate(), this.ChonDenNgayHan.getDate());
                    System.out.println("số lượng phần tử:"+ds.size());
                    for (int i = 0; i < ds.size(); i++) {
                        DSQuaHanDTO temp = ds.get(i);
                        int stt = temp.getStt();
                        String mathe = temp.getMathe();
                        String madg = temp.getMadocgia();
                        String ten = temp.getTenDG();
                        int sosach = temp.getSoSachQuaHan();
                        Object[] arr = {stt, mathe, madg, ten, sosach};
                        model.addRow(arr);
                    }
                    this.TableHan.setModel(model);
                    break;
                }
                case 2: {
                    DefaultTableModel model = new DefaultTableModel();
                    String[] ar = {"STT", "Mã thẻ", "Mã độc giả", "Tên độc giả", "Số sách quá hạn"};
                    model.setColumnIdentifiers(ar);
                    DSQuaHanBLL dsquahanbll = new DSQuaHanBLL();
                    ArrayList<DSQuaHanDTO> ds = dsquahanbll.getTheoThangHan(this.ChonThangHan.getMonth(), this.ChonNamHan.getYear());
                    for (int i = 0; i < ds.size(); i++) {
                        DSQuaHanDTO temp = ds.get(i);
                        int stt = temp.getStt();
                        String mathe = temp.getMathe();
                        String madg = temp.getMadocgia();
                        String ten = temp.getTenDG();
                        int sosach = temp.getSoSachQuaHan();
                        Object[] arr = {stt, mathe, madg, ten, sosach};
                        model.addRow(arr);
                    }
                    this.TableHan.setModel(model);
                    break;
                }
            }
        }
        if(ae.getSource().equals(BThemDocGia)){
            DocGiaBLL dg=new DocGiaBLL();
            String madg=Database.TaoMa("docgia");
            String mathe=Database.TaoMa("thethuvien");
            String strDate = new SimpleDateFormat("dd-MM-yyyy").format(new java.sql.Date(this.DateNgaySinh.getDate().getTime()));
            dg.ThemDocGia(new DocGiaDTO(madg, this.TextTen.getText(), strDate, this.TextSDT.getText(), this.TextDiaChi.getText(),(String) this.CBBoxLop.getSelectedItem(), (String)this.CBBoxDoiTuong.getSelectedItem(), this.TextGioiTinh.getText(), mathe), new TaiKhoanDTO(madg, madg, "docgia"), new TheThuVienDTO(mathe, madg, "", "", ""));
            this.setDefaultDocgia();
        }
        if(ae.getSource().equals(BXoaDocGia)){
            DocGiaBLL dg=new DocGiaBLL();
            dg.XoaDocGia((String) this.TableDocGia.getValueAt(this.TableDocGia.getSelectedRow(), 0));
            this.setDefaultDocgia();
        }
        if(ae.getSource().equals(BSuaDocGia)){
            DocGiaBLL dg=new DocGiaBLL();
            String strDate = new SimpleDateFormat("dd-MM-yyyy").format(new java.sql.Date(this.DateNgaySinh.getDate().getTime()));
            dg.SuaDocGia(new DocGiaDTO(null, this.TextTen.getText(), strDate, this.TextSDT.getText(), this.TextDiaChi.getText(),(String) this.CBBoxLop.getSelectedItem(), (String)this.CBBoxDoiTuong.getSelectedItem(), this.TextGioiTinh.getText(), null), (String) this.TableDocGia.getValueAt(this.TableDocGia.getSelectedRow(), 0));
            this.setDefaultDocgia();
        }
        if(ae.getSource().equals(BXemDocGia)){
             int index = this.TableDocGia.getSelectedRow();
            this.BSuaDocGia.setEnabled(true);
            this.TextGioiTinh.setEditable(false);
            String[] temp = new String[9];
            for (int i = 0; i < 9; i++) {
                temp[i] = (String) this.TableDocGia.getModel().getValueAt(index, i);
            }
            this.TextTen.setText(temp[1]);
            this.TextGioiTinh.setText(temp[3]);
            this.TextDiaChi.setText(temp[4]);
            this.TextSDT.setText(temp[6]);
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            // set formatter to use UTC (instead of JVM default timezone)
            sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
            try {
                // parse it as midnight (no shift to 01:00)
                java.util.Date date = sdf.parse(temp[5]);
                java.util.Date dateutil = new java.util.Date(date.getTime());
                this.DateNgaySinh.setDate(dateutil);
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
            this.CBBoxDoiTuong.setSelectedItem(temp[7]);
            this.CBBoxLop.setSelectedItem(temp[8]);
            this.BXoaDocGia.setEnabled(true);
        }
    }

    @Override
    public void itemStateChanged(ItemEvent ie) {
        if (ie.getStateChange() == ItemEvent.SELECTED) {
            JComboBox localCombo = (JComboBox) ie.getSource();
            if (localCombo.getSelectedItem().toString().equals("Hoc sinh")) {
                this.CBBoxLop.setEnabled(true);
            } else {
                this.CBBoxLop.setEnabled(false);
            }
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void valueChanged(ListSelectionEvent lse) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public static int ChonKieuDuyet(boolean bl1, boolean bl2) {
        if (bl1 && bl2) {
            JOptionPane.showMessageDialog(null, "Chỉ được chọn 1 kiểu duyệt");
            return 0;
        } else {
            if (!bl1 && !bl2) {
                JOptionPane.showMessageDialog(null, "Phải chọn 1 kiểu duyệt");
                return 0;
            } else {
                if (bl1 && !bl2) {
                    return 1;
                } else {
                    return 2;
                }
            }

        }

    }
}
